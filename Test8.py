import os
import json
import random
from telegram.constants import ChatAction
from telegram import InputMediaPhoto
import asyncio
from utils_id import get_next_answer_id
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from utils import load_data, save_data
from dotenv import load_dotenv
load_dotenv()

ADMIN_ID = "924475051"
USERS_FILE = "data/users.json"
ANSWERS_FILE = "data/answers.json"
VOTES_FILE = "data/votes.json"
SEEN_FILE = "data/seen.json"
CONFIG_FILE = "data/config.json"
config = load_data(CONFIG_FILE)
MAX_CHARS = config.get("max_chars", 20)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_data(USERS_FILE)
    user_id = str(user.id)

    # üëÄ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    args = context.args
    referred_by = args[0] if args else None
    is_new_user = user_id not in users

    if is_new_user:
        users[user_id] = {
            "username": user.username or user.first_name,
            "answers_left": 1,
            "points": 0,
            "invited_users": [],
            "bonus_points": 0.0
        }

        # üéÅ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π
        if referred_by and referred_by != user_id and referred_by in users:
            inviter = users[referred_by]
            inviter.setdefault("invited_users", [])
            inviter.setdefault("bonus_points", 0.0)

            if user_id not in inviter["invited_users"]:
                inviter["invited_users"].append(user_id)

                # –î–æ–¥–∞—î–º–æ 0.5, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 5
                if inviter["bonus_points"] < 5.0:
                    inviter["bonus_points"] += 0.5
                    inviter["bonus_points"] = min(inviter["bonus_points"], 5.0)

                    await context.bot.send_message(
                        chat_id=int(referred_by),
                        text=f"üéâ –•—Ç–æ—Å—å –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –∑–∞ —Ç–≤–æ—ó–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +0.5 –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞ (—Ä–∞–∑–æ–º: {inviter['bonus_points']} / 5)"
                    )
                else:
                    await context.bot.send_message(
                        chat_id=int(referred_by),
                        text=f"‚ÑπÔ∏è –•—Ç–æ—Å—å –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –∑–∞ —Ç–≤–æ—ó–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –∞–ª–µ —Ç–∏ –≤–∂–µ –¥–æ—Å—è–≥–Ω—É–≤ –ª—ñ–º—ñ—Ç—É –±–æ–Ω—É—Å—ñ–≤ (5 –±–∞–ª—ñ–≤)."
                    )
    else:
        users[user_id]["username"] = user.username or user.first_name
        users[user_id].setdefault("answers_left", 1)
        users[user_id].setdefault("points", 0)
        users[user_id].setdefault("invited_users", [])
        users[user_id].setdefault("bonus_points", 0.0)

    # ‚úÖ Save –ø—ñ—Å–ª—è —É—Å—ñ—Ö –∑–º—ñ–Ω
    save_data(USERS_FILE, users)

    # üì® –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    config = load_data(CONFIG_FILE)
    question = config.get("question", "–ü–∏—Ç–∞–Ω–Ω—è –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    max_chars = config.get("max_chars", 20)

    await update.message.reply_text(
        f"üëã –í—ñ—Ç–∞—î–º–æ!\n"
        f"üü° –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n"
        f"{question}\n\n"
        f"‚úèÔ∏è /feed ‚Äì —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —ñ–Ω—à–∏—Ö\n"
    )

    welcome_photo_id = config.get("welcome_photo_id")
    if welcome_photo_id:
        await context.bot.send_chat_action(chat_id=user.id, action=ChatAction.UPLOAD_PHOTO)
        await context.bot.send_photo(chat_id=user.id, photo=welcome_photo_id)







async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_data(USERS_FILE)
    user_id = str(user.id)

    # Auto-register user if not yet in users.json
    if user_id not in users:
        users[user_id] = {
            "username": user.username or user.first_name,
            "answers_left": 1,
            "points": 0,
            "invited_users": [],
            "bonus_given": False
        }
    
    save_data(USERS_FILE, users)
    user_data = users[user_id]

    if user_data["answers_left"] <= 0:
        answers = load_data(ANSWERS_FILE)
        has_answer = any(str(a["user_id"]) == user_id for a in answers.values())

        if not has_answer:
            print(f"üõ† Resetting 'answers_left' for {user_id} because no answer found")
            user_data["answers_left"] = 1
            save_data(USERS_FILE, users)
        else:
            await update.message.reply_text("‚ùóÔ∏è –í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏.\n\n/delete, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤—É.\n\n/feed ‚Äì –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —ñ–Ω—à–∏—Ö.")
            return

    message_text = update.message.text.strip()

    config = load_data(CONFIG_FILE)
    max_chars = config.get("max_chars", 20)
    if len(message_text) > max_chars:
        await update.message.reply_text(f"–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º {max_chars} —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    answers = load_data(ANSWERS_FILE)

    answer_id = get_next_answer_id()


    answers[answer_id] = {
        "user_id": user.id,
        "username": user.username or user.first_name,
        "text": message_text,
        "score": 0
    }

    save_data(ANSWERS_FILE, answers)
    users[user_id]["answers_left"] -= 1
    save_data(USERS_FILE, users)


    total_comments = len(answers)

    config = load_data(CONFIG_FILE)
    last_notify = config.get("last_notify_count", 0)

    if total_comments // 10 > last_notify // 10:
        config["last_notify_count"] = total_comments
        save_data(CONFIG_FILE, config)

        message = f"üéâ –£ —Å—Ç—Ä—ñ—á—Ü—ñ –≤–∂–µ {total_comments} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤! –ì–æ–ª–æ—Å—É–π, —â–æ–± –±—É—Ç–∏ –≤–∏–¥–∏–º–∏–º –¥–ª—è —ñ–Ω—à–∏—Ö - /feed!"
        for uid in users:
            try:
                await context.bot.send_message(chat_id=int(uid), text=message)
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {uid}: {e}")

    print(f"‚úÖ Answer saved from {user.username or user.first_name}: {message_text}")
    await update.message.reply_text(
        "–í–∞—É, —Ç–∏ —Ç–∞–∫–∏–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π! üòÆ‚Äçüí® –¢–µ–ø–µ—Ä –∑–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞, —â–æ–± –±—É—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∏–¥–∏–º–∏–º –¥–ª—è —ñ–Ω—à–∏—Ö! /myinvite\n\n/feed ‚Äì –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —ñ–Ω—à–∏—Ö\n\n/points ‚Äì –º–æ—ó –±–∞–ª–∏\n/top ‚Äì –ª—ñ–¥–µ—Ä–∏\n/delete - –∑–∞–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å/i."
    )







async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_data(USERS_FILE)
    answers = load_data(ANSWERS_FILE)
    seen = load_data(SEEN_FILE)

    if user_id not in users:
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    # üîÑ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—Å—ñ seen ID ‚Äî —Ü–µ —Ä—è–¥–∫–∏
    seen_ids = set(str(aid) for aid in seen.get(user_id, []))

    # üîç –í–∏–±—ñ—Ä —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —è–∫—ñ —â–µ –Ω–µ –±—É–ª–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
    unseen = [
        (aid, a) for aid, a in answers.items()
        if str(aid) not in seen_ids and a["user_id"] != int(user_id)
    ]

    # üêû DEBUG INFO
    print(f"üîç User ID: {user_id}")
    print(f"üëÅÔ∏è Seen answer IDs: {seen_ids}")
    print(f"üì¶ All answer IDs: {list(answers.keys())}")
    print(f"üÜï Unseen answer IDs: {[aid for aid, _ in unseen]}")
    for aid, a in answers.items():
        print(f"‚û°Ô∏è Answer {aid}: by user {a['user_id']}, text: {a['text']}")

    if not unseen:
        await update.message.reply_text("üëª –í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.\n\n/myinvite, —â–æ–± –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–∑—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∏ –¥–æ —Ä–µ–π—Ç–∏–Ω–≥—É /top üí∞")
        return

    # üéØ –í–∏–ø–∞–¥–∫–æ–≤–∞ –Ω–µ–≤–∏–¥–∏–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    aid, answer = random.choice(unseen)

    # ‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—É
    seen.setdefault(user_id, []).append(str(aid))
    save_data(SEEN_FILE, seen)

    text = f"‚ùì {answer['text']}"

    buttons = [
        [InlineKeyboardButton("üòÇ", callback_data=f"vote|{aid}|1")],
        [InlineKeyboardButton("üòÉ", callback_data=f"vote|{aid}|2")],
        [InlineKeyboardButton("üíÄ", callback_data=f"vote|{aid}|-1")]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))






async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    votes = load_data(VOTES_FILE)
    answers = load_data(ANSWERS_FILE)
    users = load_data(USERS_FILE)

    _, aid, value = query.data.split("|")
    vote_key = f"{user_id}_{aid}"

    if vote_key in votes:
        await query.edit_message_text("‚õî –í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞ —Ü—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        return

    value = int(value)
    votes[vote_key] = value

    answer = answers.get(aid)
    if not answer:
        await query.edit_message_text("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    answer_user_id = str(answer["user_id"])
    answer["score"] = answer.get("score", 0)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
    answer["positive_reactions"] = answer.get("positive_reactions", 0)
    answer["negative_reactions"] = answer.get("negative_reactions", 0)

    # –û—Ç—Ä–∏–º—É—î–º–æ –±–æ–Ω—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (0.0, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
    bonus = users.get(answer_user_id, {}).get("bonus_points", 0.0)

    # üëç –ì–æ–ª–æ—Å 1 (10 –±–∞–ª—ñ–≤ + –±–æ–Ω—É—Å, —è–∫—â–æ —î)
    if value == 1:
        answer["score"] += 10
        answer["positive_reactions"] += 1
        if bonus > 0:
            answer["score"] += bonus

    # ‚úåÔ∏è –ì–æ–ª–æ—Å 2 (2 –±–∞–ª–∏ + –±–æ–Ω—É—Å, —è–∫—â–æ —î)
    elif value == 2:
        answer["score"] += 2
        answer["positive_reactions"] += 1
        if bonus > 0:
            answer["score"] += bonus

    # üëé –ì–æ–ª–æ—Å 3 (‚Äì3 –±–∞–ª–∏, –±–µ–∑ –±–æ–Ω—É—Å—É)
    else:
        answer["score"] -= 3
        answer["negative_reactions"] += 1

    save_data(VOTES_FILE, votes)
    save_data(ANSWERS_FILE, answers)

    await query.edit_message_text("‚úÖ –¢–≤—ñ–π –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")

    # ‚ö†Ô∏è –°–∏–º—É–ª—é—î–º–æ /feed
    class FakeMessage:
        def __init__(self, user_id):
            self.from_user = type("User", (), {"id": int(user_id)})
            self.effective_user = self.from_user

        async def reply_text(self, text, reply_markup=None):
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    fake_update = Update(update.update_id, message=FakeMessage(user_id))
    await feed(fake_update, context)







async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    answers = load_data(ANSWERS_FILE)
    config = load_data(CONFIG_FILE)

    current_user_id = str(update.effective_user.id)
    reveal_names = config.get("reveal_names", False)
    hide_comments = config.get("hide_comments", False)

    leaderboard_entries = []

    for aid, answer in answers.items():
        uid = str(answer["user_id"])
        user = users.get(uid)
        if not user:
            continue

        username = user.get("username") or f"Anon_{uid[-4:]}"
        display_name = f"@{username}" if reveal_names and user.get("username") else f"Anon_{uid[-4:]}"
        
        # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ score (–±–æ–Ω—É—Å –≤–∂–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ –ø—ñ–¥ —á–∞—Å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)
        total_score = answer.get("score", 0)

        leaderboard_entries.append({
            "user_id": uid,
            "username": display_name,
            "text": "" if hide_comments else answer.get("text", ""),
            "points": round(total_score, 1)
        })

    leaderboard_entries.sort(key=lambda x: x["points"], reverse=True)
    medals = ["ü•á", "ü•à", "ü•â"]

    message = "üèÜ –¢–æ–ø-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n\n"
    for i, entry in enumerate(leaderboard_entries[:10], start=1):
        medal = medals[i - 1] if i <= 3 else f"{i}."
        message += f"{medal} {entry['username']} ‚Äì {entry['points']} –±–∞–ª—ñ–≤\n"
        if entry['text']:
            message += f"üìù {entry['text']}\n"
        message += "\n"

    # –Ø–∫—â–æ —Ç–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –≤ —Ç–æ–ø—ñ ‚Äì –ø–æ–∫–∞–∂–∏ —ó—ó
    if current_user_id not in [e["user_id"] for e in leaderboard_entries[:10]]:
        for i, entry in enumerate(leaderboard_entries, start=1):
            if entry["user_id"] == current_user_id:
                message += f"üë§ –í–ò ({i} –º—ñ—Å—Ü–µ): {entry['username']}\n"
                message += f"üèÖ {entry['points']} –±–∞–ª—ñ–≤\n"
                if entry['text']:
                    message += f"üìù {entry['text']}\n"
                break

    await update.message.reply_text(message)


















#DELETE ANSWER
async def delete_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_data(USERS_FILE)
    answers = load_data(ANSWERS_FILE)
    votes = load_data(VOTES_FILE)

    deleted = False
    to_delete = []

    # Find answers to delete
    for aid, answer in answers.items():
        if str(answer.get("user_id")) == user_id:
            to_delete.append(aid)

    # Delete answers and related votes
    for aid in to_delete:
        del answers[aid]
        deleted = True

        # Delete all votes related to that answer
        vote_keys_to_remove = [k for k in votes if k.endswith(f"_{aid}")]
        for vk in vote_keys_to_remove:
            del votes[vk]

    if deleted:
        users[user_id]["answers_left"] = 1
        users[user_id]["points"] = 0
        save_data(ANSWERS_FILE, answers)
        save_data(USERS_FILE, users)
        save_data(VOTES_FILE, votes)
        await update.message.reply_text("üóëÔ∏è –í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ) –≤–∏–¥–∞–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤—É.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")




async def toggle_names(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    # Optional: restrict to your admin user ID
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É.")
        return

    config = load_data(CONFIG_FILE)
    reveal = config.get("reveal_names", False)
    config["reveal_names"] = not reveal
    save_data(CONFIG_FILE, config)

    status = "—ñ–º–µ–Ω–∞ —Ç–µ–ø–µ—Ä –≤–∏–¥–Ω–æ" if config["reveal_names"] else "—ñ–º–µ–Ω–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ"
    await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {status}.")



async def toggle_comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É.")
        return

    config = load_data(CONFIG_FILE)
    hide = config.get("hide_comments", False)
    config["hide_comments"] = not hide
    save_data(CONFIG_FILE, config)

    status = "–∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–µ–ø–µ—Ä –≤–∏–¥–Ω–æ" if not config["hide_comments"] else "–∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ"
    await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {status}.")




async def check_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_data(USERS_FILE)
    answers = load_data(ANSWERS_FILE)

    if user_id not in users:
        await update.message.reply_text("‚õî –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start.")
        return

    user_answers = [a for a in answers.values() if str(a["user_id"]) == user_id]
    if not user_answers:
        await update.message.reply_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
        return

    bonus_used = users[user_id].get("bonus_points", 0.0)

    message = "üí∞ –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –±–∞–ª–∏:\n\n"
    user_best_score = 0
    for a in user_answers:
        text = a.get("text", "").strip() or "(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)"
        score = a.get("score", 0)
        user_best_score = max(user_best_score, score)
        message += f"‚Äì {text} ‚Äî {score} –±–∞–ª—ñ–≤\n"

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ü–µ –≤ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
    all_scores = [(str(a["user_id"]), a.get("score", 0)) for a in answers.values()]
    all_scores.sort(key=lambda x: x[1], reverse=True)

    rank = [uid for uid, _ in all_scores].index(user_id) + 1

    message += f"\nüéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å: ({bonus_used}/5 –±–æ–Ω—É—Å—ñ–≤)"
    message += f"\nüìä –¢–∏ –∑–∞—Ä–∞–∑ {rank} —É —Ä–µ–π—Ç–∏–Ω–≥—É! /top"
    message += "\n\n/myinvite ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞ –π –æ—Ç—Ä–∏–º–∞–π —â–µ –±–æ–Ω—É—Å–∏!"
    message += "\n/donate ‚Äî –¥–æ–¥–∞–π —â–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞ –¥–æ–Ω–∞—Ç!"

    await update.message.reply_text(message)










#donate
async def donate_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üí∏ *–ó–±—ñ–ª—å—à —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É!*\n\n"
        "–î–æ–¥–∞–π —â–µ –¢–†–ò –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —É —Å—Ç—Ä—ñ—á–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–æ–Ω–∞—Ç—å –Ω–∞ *–ú–æ–Ω–æ–±–∞–Ω–∫—É* (–¥–æ–Ω–∞—Ç –≤—ñ–¥ 50 –≥—Ä–Ω.) —ñ –Ω–∞–¥—ñ—à–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é –º–µ–Ω—ñ ‚Äì [@SireXl](https://t.me/SireXl).\n\n"
        "üîó [–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏ –Ω–∞ –±–∞–Ω–∫—É](https://send.monobank.ua/jar/mvaEKosuB)\n\n"
        "–†–∞–∑–æ–º –∑ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—î—é –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤–∫–∞–∂–∏ —Å–≤—ñ–π *ID* (–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—É—Ç: @userinfobot).\n\n"
        "_–ë–∞–ª–∏ –∑–∞ –∫–æ–∂–µ–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä —Å—É–º—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ._\n\n"
        "*(—á–∞—Å—Ç–∏–Ω—É –∫–æ—à—Ç—ñ–≤ –º–∏ —Å–ø—Ä—è–º—É—î–º–æ –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å /info)*"
    )
    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)






#Message
async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É.")
        return

    users = load_data(USERS_FILE)

    # Case 1: Admin is replying to a photo
    if update.message.reply_to_message and update.message.reply_to_message.photo:
        caption = " ".join(context.args) if context.args else ""
        photo = update.message.reply_to_message.photo[-1].file_id
        count = 0
        for uid in users:
            try:
                await context.bot.send_photo(chat_id=int(uid), photo=photo, caption=caption)
                count += 1
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –¥–æ {uid}: {e}")
        await update.message.reply_text(f"üì∏ –§–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        return

    # Case 2: Regular text message
    if not context.args:
        await update.message.reply_text("‚ùó –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è /m –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ.")
        return

    text = " ".join(context.args)
    count = 0
    for uid in users:
        try:
            await context.bot.send_message(chat_id=int(uid), text=text)
            count += 1
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {uid}: {e}")

    await update.message.reply_text(f"üì¢ –¢–µ–∫—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    # Case 3: Admin is replying to a poll
    if update.message.reply_to_message and update.message.reply_to_message.poll:
        poll = update.message.reply_to_message.poll
        question = poll.question
        options = [opt.text for opt in poll.options]
        allows_multiple_answers = poll.allows_multiple_answers
        is_anonymous = poll.is_anonymous

        count = 0
        for uid in users:
            try:
                await context.bot.send_poll(
                    chat_id=int(uid),
                    question=question,
                    options=options,
                    is_anonymous=is_anonymous,
                    allows_multiple_answers=allows_multiple_answers
                )
                count += 1
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–æ {uid}: {e}")

        await update.message.reply_text(f"üìä –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        return




admin_albums = {}  # media_group_id -> list of photo file_ids
admin_album_captions = {}  # media_group_id -> caption
pending_group_id = None  # –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–ª—å–±–æ–º

# –ö—Ä–æ–∫ 1: –ø—Ä–∏–π–º–∞—î–º–æ –∞–ª—å–±–æ–º, –∞–ª–µ –ù–ï –Ω–∞–¥—Å–∏–ª–∞—î–º–æ
async def handle_admin_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pending_group_id

    message = update.message
    user_id = str(update.effective_user.id)
    if str(user_id) != ADMIN_ID:
        return

    if not message.media_group_id or not message.photo:
        return

    group_id = message.media_group_id
    photo_file_id = message.photo[-1].file_id

    if group_id not in admin_albums:
        admin_albums[group_id] = []

    admin_albums[group_id].append(photo_file_id)
    pending_group_id = group_id

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    await message.reply_text("üì∏ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∞–ª—å–±–æ–º—É. –ö–æ–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /sendalbum –ü–Ü–î–ü–ò–°")

# –ö—Ä–æ–∫ 2: –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–ª—å–±–æ–º –≤—Ä—É—á–Ω—É
async def send_admin_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pending_group_id

    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞.")
        return

    if not pending_group_id or pending_group_id not in admin_albums:
        await update.message.reply_text("‚ùó –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∞–ª—å–±–æ–º—É. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞–ª—å–±–æ–º.")
        return

    caption = " ".join(context.args) if context.args else ""
    photos = admin_albums.pop(pending_group_id)
    pending_group_id = None

    media_group = []
    for i, pid in enumerate(photos):
        if i == 0:
            media_group.append(InputMediaPhoto(media=pid, caption=caption, parse_mode="HTML"))
        else:
            media_group.append(InputMediaPhoto(media=pid))

    users = load_data(USERS_FILE)
    sent = 0
    for uid in users:
        try:
            await context.bot.send_media_group(chat_id=int(uid), media=media_group)
            sent += 1
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ {uid}: {e}")

    await update.message.reply_text(f"‚úÖ –ê–ª—å–±–æ–º —ñ–∑ {len(photos)} —Ñ–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")








#clear
async def clear_all_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—É.")
        return

    # Clear answers, votes, seen
    save_data(ANSWERS_FILE, {})
    save_data(VOTES_FILE, {})
    save_data(SEEN_FILE, {})

    # Reset all user points and answers_left
    users = load_data(USERS_FILE)
    for u in users.values():
        u["points"] = 0
        u["answers_left"] = 1
    save_data(USERS_FILE, users)

    await update.message.reply_text("üßπ –í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –≥–æ–ª–æ—Å–∏ —Ç–∞ –æ—á–∫–∏ –æ—á–∏—â–µ–Ω–æ.")




#stephoto
# /setphoto ‚Äì –∞–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —Ñ–æ—Ç–æ, —è–∫–µ —Å—Ç–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–º
async def set_welcome_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not update.message.reply_to_message or not update.message.reply_to_message.photo:
        await update.message.reply_text("üì∏ –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ.")
        return

    photo_id = update.message.reply_to_message.photo[-1].file_id
    config = load_data(CONFIG_FILE)
    config["welcome_photo_id"] = photo_id
    save_data(CONFIG_FILE, config)

    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–æ–Ω–æ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–µ –ø—ñ—Å–ª—è /start.")



#deletephoto
async def delete_welcome_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    config = load_data(CONFIG_FILE)

    if "welcome_photo_id" in config:
        del config["welcome_photo_id"]
        save_data(CONFIG_FILE, config)
        await update.message.reply_text("üóëÔ∏è –§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –í–æ–Ω–æ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å –ø—ñ—Å–ª—è /start.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ñ–æ–¥–Ω–µ —Ñ–æ—Ç–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


#set a new question
async def set_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –ü—ñ—Å–ª—è /question –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è.")
        return

    new_question = " ".join(context.args).strip()
    config = load_data(CONFIG_FILE)
    config["question"] = new_question
    save_data(CONFIG_FILE, config)

    await update.message.reply_text(f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:\n\nüü° {new_question}")


#max length of answer
async def set_maxlength(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /maxlength [—á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100]")
        return

    new_length = int(context.args[0])
    if not (1 <= new_length <= 500):
        await update.message.reply_text("‚ùó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    config = load_data(CONFIG_FILE)
    config["max_chars"] = new_length
    save_data(CONFIG_FILE, config)

    await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_length} —Å–∏–º–≤–æ–ª—ñ–≤.")


#grant command
async def grant_extra_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /grant [user_id –∞–±–æ @username] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]")
        return

    users = load_data(USERS_FILE)
    target = context.args[0]
    try:
        amount = int(context.args[1])
        if amount <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùó –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º.")
        return

    # Find user by ID or @username
    target_id = None
    if target.startswith("@"):
        for uid, udata in users.items():
            if udata.get("username") and f"@{udata['username']}" == target:
                target_id = uid
                break
    elif target.isdigit():
        target_id = target if target in users else None

    if not target_id:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    users[target_id]["answers_left"] = users[target_id].get("answers_left", 1) + amount
    save_data(USERS_FILE, users)

    await update.message.reply_text(
        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {users[target_id].get('username', target_id)} –Ω–∞–¥–∞–Ω–æ {amount} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."
    )




#Info
async def info_later(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = load_data(CONFIG_FILE)
    info_text = config.get("info_text", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å –∑‚Äô—è–≤–∏—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ.")
    await update.message.reply_text(info_text)



#Set info
async def set_info_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—É.")
        return

    new_text = " ".join(context.args)
    if not new_text:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /setinfo.")
        return

    config = load_data(CONFIG_FILE)
    config["info_text"] = new_text
    save_data(CONFIG_FILE, config)

    await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è /info –æ–Ω–æ–≤–ª–µ–Ω–æ.")



#ALL FEED
async def view_all_feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—É.")
        return

    answers = load_data(ANSWERS_FILE)
    users = load_data(USERS_FILE)

    if not answers:
        await update.message.reply_text("‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥–µ–π —â–µ –Ω–µ–º–∞—î.")
        return

    sorted_answers = sorted(answers.items(), key=lambda x: -x[1].get("score", 0))
    message = "üìã *–í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:*\n\n"

    for aid, a in sorted_answers:
        uid = str(a.get("user_id", ""))
        username = users.get(uid, {}).get("username", "NoUsername")
        text = a.get("text", "")
        score = a.get("score", 0)
        message += f"‚Ä¢ `{uid}` ({username}): \"{text}\" ‚Äî {score} –±–∞–ª—ñ–≤\n"

    # If too long, send as multiple messages
    for chunk in split_message(message):
        await update.message.reply_text(chunk, parse_mode="Markdown")




def split_message(text, max_length=4000):
    lines = text.split("\n")
    chunks, chunk = [], ""
    for line in lines:
        if len(chunk) + len(line) + 1 > max_length:
            chunks.append(chunk)
            chunk = line + "\n"
        else:
            chunk += line + "\n"
    if chunk:
        chunks.append(chunk)
    return chunks


#Online
async def online(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = load_data(USERS_FILE)
    count = len(users)
    await update.message.reply_text(f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –±–æ—Ç: {count}")



# /invite command
async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_data(USERS_FILE)
    answers = load_data(ANSWERS_FILE)

    if user_id not in users:
        await update.message.reply_text("‚õî –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ù–∞–ø–∏—à—ñ—Ç—å /start.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /invite [user_id –∞–±–æ @username]\n\n–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥–≤–æ—Ö –¥—Ä—É–∑—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ +50 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤! –¶—ñ –±–∞–ª–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–æ –≤—Å—ñ—Ö –≤–∞—à–∏—Ö –ø–æ—Ç–æ—á–Ω–∏—Ö —ñ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ —É –º–µ–∂–∞—Ö –∫–æ–Ω–∫—É—Ä—Å—É.")
        return

    invited = context.args[0]

    # Find invited user id
    invited_id = None
    if invited.startswith("@"):
        for uid, udata in users.items():
            if udata.get("username") and f"@{udata['username']}" == invited:
                invited_id = uid
                break
    elif invited.isdigit():
        invited_id = invited if invited in users else None

    if not invited_id:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if invited_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–µ–±–µ.")
        return

    invited_users = users[user_id].setdefault("invited_users", [])

    if invited_id in invited_users:
        await update.message.reply_text("‚ÑπÔ∏è –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –±—É–≤ –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π.")
        return

    # Add to invited list
    invited_users.append(invited_id)

    # Check if user reached a multiple of 3 invites
    if len(invited_users) % 3 == 0:
        users[user_id]["bonus_points"] = users[user_id].get("bonus_points", 0) + 50

        # Add 50 bonus points to all user's answers
        for aid, answer in answers.items():
            if str(answer["user_id"]) == user_id:
                answer["score"] += 50

        save_data(ANSWERS_FILE, answers)
        await update.message.reply_text(f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ {len(invited_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ +50 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤!")

    else:
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö. –£—Å—å–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {len(invited_users)}.")

    save_data(USERS_FILE, users)



#ADD POINTS
async def add_bonus_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—É.")
        return

    if len(context.args) != 2:
        await update.message.reply_text("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addpoints [user_id –∞–±–æ @username] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤]")
        return

    target = context.args[0]
    try:
        points_to_add = int(context.args[1])  # can be negative
    except ValueError:
        await update.message.reply_text("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return

    users = load_data(USERS_FILE)

    # üîç Find user by @username or ID
    target_id = None
    if target.startswith("@"):
        for uid, udata in users.items():
            if udata.get("username") and f"@{udata['username']}" == target:
                target_id = uid
                break
    elif target.isdigit():
        target_id = target if target in users else None

    if not target_id:
        await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # ‚úÖ Add or subtract points
    bonus_points[target_id] = bonus_points.get(target_id, 0) + points_to_add
    save_data("data/bonus_points.json", bonus_points)

    updated_total = bonus_points[target_id]
    await update.message.reply_text(
        f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target} {'–¥–æ–¥–∞–Ω–æ' if points_to_add >= 0 else '–∑–Ω—è—Ç–æ'} {abs(points_to_add)} –±–∞–ª—ñ–≤.\n"
        f"üí∞ –ù–æ–≤–∏–π –±–æ–Ω—É—Å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {updated_total}"
    )




#myinvite
async def my_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    bot_username = (await context.bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?start={user_id}"

    # –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è
    message1 = (
        "üéÅ –¶–µ —Ç–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è!\n"
        "–ù–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ –¥—Ä—É–≥—É —ñ –æ—Ç—Ä–∏–º–∞–π –±–æ–Ω—É—Å–Ω—ñ –±–∞–ª–∏.\n"
        "–ö–æ–∂–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞—î +0.5 –±–∞–ª–∞ –¥–æ —É—Å—ñ—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π –Ω–∞ —Ç–≤—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä!"
    )

    # –î—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —Å–∞–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è + call to action
    message2 = (
        f"üîó {invite_link}\n\n"
        "–ù–∞–¥—ñ—à–ª–∏ –Ω–∞–π–∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—à–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ —á–∞—Ç —ñ –≤–∏–≥—Ä–∞–π 1000 –≥—Ä–Ω! üí∏\n\n"
        "–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –±—É—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º.\n"
        "–ö–æ–º–µ–Ω—Ç—É–π —ñ –æ—Ü—ñ–Ω—é–π —ñ–Ω—à–∏—Ö, —â–æ–± –æ—á–æ–ª–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤ üèÜ\n\n"
        "(—Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω–∏—Ö –∑–∞—Å–∞–¥–∞—Ö)"
    )

    await update.message.reply_text(message1)
    await update.message.reply_text(message2)










# Main function to set up the bot and handlers
def main():
    os.makedirs("data", exist_ok=True)
    for file, default in [
        (USERS_FILE, {}),
        (ANSWERS_FILE, {}),
        (VOTES_FILE, {}),
        (SEEN_FILE, {}),
        (CONFIG_FILE, {"question": "–©–û –í –°–í–Ü–¢–Ü –ù–ê–ô–î–û–í–®–ï?"})
    ]:
        if not os.path.exists(file):
            with open(file, "w", encoding="utf-8") as f:
                json.dump(default, f, ensure_ascii=False, indent=2)







    
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("feed", feed))
    app.add_handler(CommandHandler("top", leaderboard))
    app.add_handler(CommandHandler("delete", delete_answer))
    app.add_handler(CommandHandler("reveal", toggle_names))
    app.add_handler(CommandHandler("points", check_points))
    app.add_handler(CommandHandler("m", broadcast_message))
    app.add_handler(CommandHandler("clear", clear_all_data))
    app.add_handler(CommandHandler("setphoto", set_welcome_photo))
    app.add_handler(CommandHandler("deletephoto", delete_welcome_photo))
    app.add_handler(CommandHandler("question", set_question))
    app.add_handler(CommandHandler("maxlength", set_maxlength))
    app.add_handler(CommandHandler("grant", grant_extra_answer))
    app.add_handler(CommandHandler("donate", donate_info))
    app.add_handler(CommandHandler("info", info_later))
    app.add_handler(CommandHandler("setinfo", set_info_text))
    app.add_handler(CommandHandler("allfeed", view_all_feed))
    app.add_handler(CommandHandler("online", online))
    app.add_handler(CommandHandler("addpoints", add_bonus_points))
    app.add_handler(CommandHandler("myinvite", my_invite))
    app.add_handler(CommandHandler('hide_comments', toggle_comments))
    app.add_handler(MessageHandler(filters.PHOTO, handle_admin_album))
    app.add_handler(CommandHandler("sendalbum", send_admin_album))















    app.add_handler(CallbackQueryHandler(handle_vote, pattern="^vote\\|"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î")
    app.run_polling()


if __name__ == "__main__":
    main()
